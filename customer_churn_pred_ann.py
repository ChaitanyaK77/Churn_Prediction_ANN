# -*- coding: utf-8 -*-
"""Customer_Churn_pred_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2frPuFa7IAkI5bxQc_ZO-TOLpUJ8nzp

# **Fine Tuning and Building an ANN to predict Customer Churn**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/Churn_pred_data.csv")
data.head()

data.shape

data.columns

data.info()

data.describe()

data.drop('customerID',axis = 'columns',inplace=True)

data.dtypes

data.TotalCharges.values

data.MonthlyCharges.values

pd.to_numeric(data.TotalCharges,errors='coerce').isnull()

data[pd.to_numeric(data.TotalCharges,errors='coerce').isnull()]

data[pd.to_numeric(data.TotalCharges,errors='coerce').isnull()].shape

data1 = data[data.TotalCharges!=' ']

data1.shape

data.shape

data1.TotalCharges = pd.to_numeric(data1.TotalCharges)

data1.info()

data1[data1.Churn=='No'].count()

tenure_no_churn = data1[data1.Churn=='No'].tenure
tenure_yes_churn = data1[data1.Churn=='Yes'].tenure

plt.hist([tenure_yes_churn,tenure_no_churn],color=['green','red'],label=['Churn=Yes','Churn=No'])
plt.legend()
plt.xlabel('Tenure')
plt.ylabel("Number of Customers")
plt.title("Churn Visualization")

monthly_no_churn = data1[data1.Churn=='No'].MonthlyCharges
monthly_yes_churn = data1[data1.Churn=='Yes'].MonthlyCharges

plt.hist([monthly_yes_churn,monthly_no_churn],color=['green','red'],label=['Churn=Yes','Churn=No'])
plt.legend()
plt.xlabel('Monthly Chargs')
plt.ylabel("Number of Customers")
plt.title("Churn Visualization")

def unique_values(data_frame):
  for col in data_frame:
    if data_frame[col].dtype=='object':

      print(f'{col} : {data_frame[col].unique()}')

unique_values(data1)

data1.replace('No internet service','No',inplace=True)

data1.replace('No phone service','No',inplace=True)

unique_values(data1)

columns_with_yes_no = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup','DeviceProtection',
                       'TechSupport','StreamingTV','PaperlessBilling','Churn']

for col in columns_with_yes_no:
  data1[col].replace({'Yes':1,'No':0},inplace=True)

for col in data1:
  print(data1[col].unique())

data1['gender'].replace({'Female':1,'Male':0},inplace=True)
print("\n\n")
for col in data1:
  print(data1[col].unique())

data1.info()

unique_values(data1)

data1 = pd.get_dummies(data=data1,columns=['InternetService','Contract','PaymentMethod'])

unique_values(data1)

data1.sample(4)

data1['StreamingMovies'].replace({'No':0,'Yes':1},inplace=True)

column_to_scale=['tenure','TotalCharges','MonthlyCharges']

"""# **Feature Scaling**"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
data1[column_to_scale] = scaler.fit_transform(data1[column_to_scale])

data1['tenure']

X = data1.drop('Churn',axis='columns')
y = data1['Churn']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=5)

X_train.shape

X_test.shape

X_train[:10]

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential(
    [
        keras.layers.Dense(26,input_shape=(26,),activation='relu'),
        keras.layers.Dense(20,activation='relu'),

        keras.layers.Dense(5,activation='relu'),


        keras.layers.Dense(1,activation='sigmoid')
    ]
)

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(X_train,y_train,epochs=120)

model.summary()

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)

y_pred[:10]

y_p = []
for element in y_pred:
  if element>0.5:
    y_p.append(1)
  else:
    y_p.append(0)

y_p[:10]

y_test[:10]

"""# **Classification Report**"""

from sklearn.metrics import confusion_matrix,classification_report

print(classification_report(y_test,y_p))

import seaborn as sns
cm = tf.math.confusion_matrix(labels=y_test,predictions= y_p)

plt.figure(figsize=(10,7))

sns.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Prediction')
plt.ylabel('Truth')

